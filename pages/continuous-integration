{
  "title": "Continuous Integration",
  "journal": [
    {
      "id": "de9ecb6f701b869c",
      "type": "create",
      "item": {
        "title": "Continuous Integration"
      }
    }
  ],
  "story": [
    {
      "text": "You are a developer on an agile team. You have just finished the development of a story or task and all of the unit tests pass.",
      "id": "e341f62f3b850a36",
      "type": "paragraph"
    },
    {
      "text": "???",
      "id": "2fc4ef0b3da7c5c6",
      "type": "paragraph"
    },
    {
      "text": "Stories are broken into tasks unless they are already very small. It is the tasks that are assumed and built by the developers. Unit tests are written at the task (and sub task) level. <i>If you don't integrate the task into the build you won't know early enough that you have a problem.</i>",
      "id": "19cebc9e365af537",
      "type": "paragraph"
    },
    {
      "text": "<span class=\"sgc-2\">>>></img></span>",
      "id": "d05b96fb5fc6fd7f",
      "type": "paragraph"
    },
    {
      "text": "• Many projects fail because they are built from parts that won't integrate at the end.",
      "id": "f86545bbcb94d828",
      "type": "paragraph"
    },
    {
      "text": "• Small assumptions made frequently by many people accumulate into large problems.",
      "id": "aeac10c647dc2998",
      "type": "paragraph"
    },
    {
      "text": "• Integration takes time. It often invalidates your assumptions.",
      "id": "5c09dc7a857e9607",
      "type": "paragraph"
    },
    {
      "text": "• Small bits of code are easier to integrate than large ones.",
      "id": "92814cb83911a065",
      "type": "paragraph"
    },
    {
      "text": "• But with many pairs working, integration can be a bottleneck.",
      "id": "903a29387a74c804",
      "type": "paragraph"
    },
    {
      "text": "• Task integration requires good code management tools such as CVS and SVN unless the team is very small. (<a href=\"http://www.nongnu.org/cvs/\">http://www.nongnu.org/cvs/</a>, <a href=\"http://subversion.tigris.org\">http://subversion.tigris.org</a>/)",
      "id": "4ad552c74fa3e3b0",
      "type": "paragraph"
    },
    {
      "text": "! ! !",
      "id": "4af05e610cda101e",
      "type": "paragraph"
    },
    {
      "text": "<b>Therefore</b>, <i>immediately integrate every task into the build when all its unit tests pass.</i>",
      "id": "bc29ac692203e38d",
      "type": "paragraph"
    },
    {
      "text": "A code repository that helps you do this is essential. CVS, for example, has such capabilities. You can run (and must pass) all the tests against the code base before you commit, so that when you do, you know that nothing is broken.",
      "id": "e3dbf0ae8c0b5408",
      "type": "paragraph"
    },
    {
      "text": "• This is another job that requires discipline. The coach must be vigilant.",
      "id": "fa9793a90b4cb067",
      "type": "paragraph"
    },
    {
      "text": "• Since tasks are small, integration is more likely to be successful. When not successful, the problems more likely to be manageable than when you do \"big bang\" integration. You also learn earlier when you have a problem if you integrate frequently. But if you can't make all the tests pass, you can't commit the code.",
      "id": "e86cd81d941f44cb",
      "type": "paragraph"
    },
    {
      "text": "• Each pair of programmers may be integrating a task every day or so (more frequently in some teams). This implies discipline with respect to maintenance of the code base. An integration machine on which all integration tasks are carried out can help here.",
      "id": "c47f71b388cd76d5",
      "type": "paragraph"
    },
    {
      "text": "• To emphasize: when you integrate, all the unit tests must pass. Not just the tests for this feature, all the tests. This implies, of course, that the tests are in the repository along with everything else and thus are accessible to everyone. You also need to achieve a <b>[[Ten Minute Build]]</b>. ",
      "id": "11477cc457c35898",
      "type": "paragraph"
    },
    {
      "text": "• You also need to run the Acceptance Tests. Those for the story just built must pass, of course, but you need a policy for what happens when a new story being integrated makes an acceptance test that was passing now fail. In many teams this is a show-stopper and all work halts until the situation is resolved.",
      "id": "dd70e7f92caad56d",
      "type": "paragraph"
    },
    {
      "text": "• You may actually need two (or more) repositories for code. One contains the committed code against which all tests pass. The other contains work in progress and is put in a centralized place only to assure that backups get done and nothing gets lost if a machine crashes or is stolen.",
      "id": "f2fc92cdde2cb118",
      "type": "paragraph"
    },
    {
      "text": "• When you think you have finished a task, but nothing you do makes it integrate correctly, warn the tracker that there may be delays.",
      "id": "93ec62e0e4f2e091",
      "type": "paragraph"
    },
    {
      "text": "The integration process has four parts. (1) Run all the tests against this new code. They must all pass. (2) Integrate the entire code base back into the local version. (3) Run all the unit tests for the system (the \"suite\"). They must all pass. (4) Commit the code back to the repository. The implication is that the code in the repository is always working integrated code. The integration process maintains the invariance of this state.",
      "id": "6c4afa74af90cd41",
      "type": "paragraph"
    },
    {
      "text": "Continuous Integration is especially difficult in distributed teams since you need to avoid conflicts as much as possible. The reduced awareness of the activities of the remote developers may lead to problems. You may need tools, and will need procedures, to be sure you have adequate awareness among team members. [19]",
      "id": "ffc241937316dd5f",
      "type": "paragraph"
    },
    {
      "text": ">>></img>",
      "id": "9890cf69653128bc",
      "type": "paragraph"
    }
  ]
}