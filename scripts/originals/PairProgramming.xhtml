<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <style type="text/css">
/*<![CDATA[*/

  p.sgc-1 {text-align: center;}
  /*]]>*/
  </style>
</head>

<body>
  <h3 id="heading_id_2">Pair Programming</h3>

  <p>You are a developer on an agile team. Development is proceeding. You are coding a task.</p>

  <p class="sgc-1">???</p>

  <p><i>When you work alone, you often get stuck. You also make simple, but possibly devious and costly, errors.</i> You need to assure that the code is of high quality and is efficiently created.</p>

  <p class="sgc-1"><img alt="" src="../Images/Forces.png" /></p>

  <p>• Code walk-throughs are typically used to assure quality but they are expensive and not an efficient use of most people's time. Everyone hates them.</p>

  <p>• Errors introduced into code slow you down more than most anything else, as they need to be removed, but it is difficult to do so.</p>

  <p>• Two people working on the same problem at the same time rarely get stuck simultaneously.</p>

  <p>• Without extensive documentation, you need to spread knowledge of the code base throughout the developers on the team.</p>

  <p class="sgc-1">! ! !</p>

  <p><b>Therefore</b>, <i>whenever you write code to be committed to the code-base, do it with a partner.&nbsp;</i>Two people share one keyboard and screen.&nbsp;One person controls the keyboard and mouse at any given instant and the other observes and comments, but the roles switch.</p>

  <p>• This practice is synergistic with many of the other practices, receiving and giving mutual support. It also provides you safety when a person leaves the team, as their knowledge doesn't depart with them. Skill transfer is also an asset to the organization.</p>

  <p>• Experience has shown that the <i>driver</i> (controlling the keyboard) tends to think in a short-term tactical manner and the <i>navigator</i> tends to thing strategically about how this piece fits into the greater whole. This can improve not only error rates, but also design.</p>

  <p>• Research has shown dramatic drops in defect rates with Pair Programming. Research has also shown little, if any, drop in productivity.</p>

  <p>• It isn't just two that people work together. Pairs shift constantly. See <b>Promiscuous Programming</b>.</p>

  <p>• A pair can get stuck, of course, but if you also do all your work in <b>Our Space</b> then this is even less likely to occur since you can always ask others for help.</p>

  <p>•&nbsp;The owner of <b>My Story</b> need not be the driver. In fact, driver-navigator roles should switch frequently and especially if one gets blocked.&nbsp;<br /></p>

  <p>• Pairing has been shown to support a <b>Humane Workplace</b>.&nbsp;<br /></p>

  <p>• In dispersed development this is still essential. See <b>Remote Pair</b>.<br /></p>

  <p>The author has this picture in his head of 10 people isolated in cubicles working alone, with everyone stuck on separate problems, but with the solutions all collectively known, though in the heads of those in the other cubes.</p>

  <p><img alt="" src="../Images/PairProgramming.png" /></p>
</body>
</html>
